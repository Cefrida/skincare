# -*- coding: utf-8 -*-
"""Skincare_preprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gDzCBohnZbG3jZImJCHYjshjv_d-vwjs

Importing Product Data
"""

import pandas as pd

product_df_full = pd.read_csv("sample_data/product_info.csv")
product_df_full.columns

"""Keep only necessary columns"""

product_df = product_df_full[[
    "product_id",
    "product_name",
    "brand_id",
    "brand_name",
    "rating",
    "reviews",
    "size",
    "price_usd","ingredients","loves_count",'primary_category',
       'secondary_category',
]]

product_df

"""Now load the review data

Preprocessing steps:
1. Keep only necessary columns
2. Drop rows where reviewers have not inputted their skin type
3. Concatenate all reviews into one review df (combined_reviews_df)
"""


# List of review files
review_files = [
    "sample_data/reviews_0-250 5.csv",
    "sample_data/reviews_250_500 2.csv",
    "sample_data/reviews_500_750.csv",
    "sample_data/reviews_750_1000.csv",
    "sample_data/reviews_1000_1500 2.csv",
    "sample_data/reviews_1500_end 2.csv"
]

all_reviews = []
for file in review_files:
    df = pd.read_csv(file, low_memory=False)
    columns_to_keep = ['author_id','product_id', 'review_text', 'rating', 'is_recommended','product_name','price_usd','brand_name', 'skin_type']
    df = df[columns_to_keep]
    df = df.dropna(subset=['skin_type'])
    all_reviews.append(df)


combined_reviews_df = pd.concat(all_reviews, ignore_index=True)

# Check the shape
print("Combined DataFrame shape:", combined_reviews_df.shape)
print(combined_reviews_df.head())

"""Now merge with product_df"""

merged_df = pd.merge(
    combined_reviews_df,
    product_df[['product_id', 'primary_category', 'secondary_category', 'rating', 'reviews','size']],
    on='product_id',
    how='left'
)

merged_df.rename(columns={'rating_y': 'avg_rating', 'rating_x': 'indv_rating'}, inplace=True)

merged_df.shape

merged_df.shape #this matches the number of rows from the concatenated reviews with 5 extra columns('product_id', 'primary_category', 'secondary_category', 'loves_count', 'rating', 'reviews','size')

merged_df.columns

"""Create a csv file to store this data

"""

merged_df.to_csv('skincare_data.csv', index=False)

"""Read in skincare data"""

skincare = pd.read_csv('/content/skincare_data.csv')

skincare.columns

"""Convert review_text to string and fill NaN with empty string

"""

skincare['review_text'] = skincare['review_text'].fillna('').astype(str)

skincare.columns

"""Install Vader and TextBlob"""

!pip install vaderSentiment
!pip install textblob

from textblob import TextBlob
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
from concurrent.futures import ProcessPoolExecutor

# Initialize VADER
vader = SentimentIntensityAnalyzer()

def get_vader_score(text):
    return vader.polarity_scores(text)['compound']

def get_textblob_score(text):
    return TextBlob(text).sentiment.polarity

def get_combined_score(vader_score, tb_score):
    return round((vader_score + tb_score) / 2, 4)

def custom_sentiment_category(score, text): # used to spot check scores - will be deleted in final df
    lowered_text = text.lower()
    if score >= 0.8:
        return 'very positive'
    elif score >= 0.1:
        return 'slightly positive'
    elif score > -0.2:
        return 'neutral'
    elif score > -0.5:
        return 'slightly negative'
    else:
        return 'very negative'


def analyze_sentiment(text):
    vader_score = get_vader_score(text)
    tb_score = get_textblob_score(text)
    combined = get_combined_score(vader_score, tb_score)
    sentiment = custom_sentiment_category(combined, text)
    return (vader_score, tb_score, combined, sentiment)


with ProcessPoolExecutor() as executor:
    results = list(executor.map(analyze_sentiment, skincare['review_text']))


# Unpack results DataFrame
skincare[['vader_score', 'textblob_score', 'combined_score', 'sentiment_category']] = pd.DataFrame(results, index=skincare.index)

"""Average combined score for each product id and add a new column with this average score for each product"""

skincare['avg_combined_score_per_product'] = (
    skincare.groupby('product_id')['combined_score']
    .transform('mean')
)

skincare.columns

skincare

"""Drop unecessary columns"""

skincare.drop(columns=['size', 'vader_score', 'textblob_score','sentiment_category'], inplace=True)

# Export the filtered reviews to a CSV file
skincare.to_csv('skincare_final.csv', index=False)

data = pd.read_csv('/content/skincare_final.csv', dtype={0: str})

data.head()

